{"uid":"728d2d6f6f423398","name":"Advanced composition","fullName":"Integer Arithmetic Expressions: Advanced composition","historyId":"ae2fe9ffaa0b5349accd0f4e2fc8a42d","time":{"start":1744920593154,"stop":1744920593156,"duration":2},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"passed","steps":[{"name":"Given I initialise a calculator","time":{"start":1744920593154,"stop":1744920593154,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Given a rational expression first using + with the list","time":{"start":1744920593154,"stop":1744920593155,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"7e13847fe9cf8475","name":".table","source":"7e13847fe9cf8475.csv","type":"text/csv","size":9}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"And a rational expression second using - with the list","time":{"start":1744920593155,"stop":1744920593155,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"3760e6a2f493c36e","name":".table","source":"3760e6a2f493c36e.csv","type":"text/csv","size":9}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"When I combine expressions first,second with *","time":{"start":1744920593155,"stop":1744920593155,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then the rational result should be 1/2","time":{"start":1744920593155,"stop":1744920593156,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":5,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Integer Arithmetic Expressions"},{"name":"framework","value":"behave"},{"name":"language","value":"cpython3"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"78e9306d01aed7ab","reportUrl":"https://Oz-NoXIII.github.io/calculator-cucumber-2025/94//#testresult/78e9306d01aed7ab","status":"passed","time":{"start":1744919664286,"stop":1744919664288,"duration":2}},{"uid":"22cbbb761fe249c1","reportUrl":"https://Oz-NoXIII.github.io/calculator-cucumber-2025/42//#testresult/22cbbb761fe249c1","status":"broken","statusDetails":"\nYou can implement step definitions for undefined steps with these snippets:\n\n@given(u'a rational expression first using + with the list')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Given a rational expression first using + with the list')\n\n","time":{"start":1744915588984,"stop":1744915588985,"duration":1}}]},"tags":[]},"source":"728d2d6f6f423398.json","parameterValues":[]}